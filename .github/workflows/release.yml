name: Clojure CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-20.04
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK x64
      uses: actions/setup-java@v2
      with:
        distribution: zulu
        architecture: x64
        java-package: jdk
        java-version: 8

    - name: Convert .properties files
      run: |
        find loc -name '*.properties' -exec sh -c '
        for file do
          base=$(basename "$file")
          native2ascii "$file" "resources/tvt/a7/profedit/${base}"
        done' sh {} +

    - name: Install clojure tools
      uses: DeLaGuardo/setup-clojure@11.0
      with:
        lein: 2.10.0

    - name: Install dependencies
      run: lein deps

    - name: Set environment for github-release
      run: |
        echo RELEASE_TAG="$(grep -m1 'defproject' project.clj | awk '{print $3}' | tr -d '\"')" >> "$GITHUB_ENV"
        echo RELEASE_NAME="$GITHUB_WORKFLOW" >> "$GITHUB_ENV"

    - name: Save current version in the resources
      run: echo "${{ env.RELEASE_TAG }}" > resources/version.txt

    - name: Gen proto
      run: lein protodeps generate

    - name: Extract Launch4j
      run: |
        tar -xzf .github/workflows/launch4j-3.13-linux-x64.tgz
        chmod +x launch4j/launch4j

    - name: Uberjar and Create Windows executable for Profedit
      run: |
        lein uberjar
        launch4j/launch4j .github/workflows/build.xml
        mv target/profedit.jar ./
        mv target/profedit.exe ./

    - name: Uberjar for Updater
      run: |
        cd .github/workflows/updater
        lein uberjar
        mv ./update.bat ../../..
        mv ./target/update.jar ../../..

    - name: Set win32 archive name for github-release
      run: |
        echo WIN32_ZIP_NAME="win32_${{ env.RELEASE_TAG }}.zip" >> "$GITHUB_ENV"

    - name: Package executables and assets
      run: |
        wget -q https://cdn.azul.com/zulu/bin/zulu8.54.0.21-ca-jre8.0.292-win_i686.zip
        unzip zulu8.54.0.21-ca-jre8.0.292-win_i686.zip -d /tmp/jre
        mkdir -p runtime
        mv /tmp/jre/*/* runtime
        zip -r ${{ env.WIN32_ZIP_NAME }} update.bat update.jar profedit.jar runtime skins profedit.exe

    outputs:
      release_tag: ${{ env.RELEASE_TAG }}
      win32_zip_name: ${{ env.WIN32_ZIP_NAME }}

  build_installer:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download files from previous job
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.win32_zip_name }}
          path: ./

      - name: Install Inno Setup 5.6.1
        run: |
          choco install innosetup --version=5.6.1 --allow-downgrade

      - name: Build Installer
        run: |
          $env:APP_VERSION="${{ needs.build.outputs.release_tag }}"
          $env:APP_EXE_NAME="$(Select-String -Pattern 'APP_EXE_NAME=\K.*' .github/workflows/setup.iss)"
          & 'C:\Program Files (x86)\Inno Setup 5\ISCC.exe' /Qp .github/workflows/setup.iss

      - name: Upload installer for release
        uses: actions/upload-artifact@v2
        with:
          name: installer
          path: Output/${{ env.APP_EXE_NAME }}_install.exe

  release:
    needs: [build, build_installer]
    runs-on: ubuntu-latest
    steps:
      - name: Download installer
        uses: actions/download-artifact@v2
        with:
          name: installer
          path: .

      - name: Create a Release
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.build.outputs.release_tag }}
          gzip: false
          files: >
            ${{ needs.build.outputs.win32_zip_name }}
            profedit.jar
            installer/${{ env.APP_EXE_NAME }}_install.exe
          allow_override: true
